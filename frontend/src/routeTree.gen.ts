/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthVerifyEmailImport } from './routes/auth/verify-email'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AdminShardsManageImport } from './routes/admin/shards/manage'
import { Route as AdminShardsLocationsImport } from './routes/admin/shards/locations'

// Create/Update Routes

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthVerifyEmailRoute = AuthVerifyEmailImport.update({
  id: '/auth/verify-email',
  path: '/auth/verify-email',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminShardsManageRoute = AdminShardsManageImport.update({
  id: '/shards/manage',
  path: '/shards/manage',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminShardsLocationsRoute = AdminShardsLocationsImport.update({
  id: '/shards/locations',
  path: '/shards/locations',
  getParentRoute: () => AdminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/auth/verify-email': {
      id: '/auth/verify-email'
      path: '/auth/verify-email'
      fullPath: '/auth/verify-email'
      preLoaderRoute: typeof AuthVerifyEmailImport
      parentRoute: typeof rootRoute
    }
    '/admin/shards/locations': {
      id: '/admin/shards/locations'
      path: '/shards/locations'
      fullPath: '/admin/shards/locations'
      preLoaderRoute: typeof AdminShardsLocationsImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/shards/manage': {
      id: '/admin/shards/manage'
      path: '/shards/manage'
      fullPath: '/admin/shards/manage'
      preLoaderRoute: typeof AdminShardsManageImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminShardsLocationsRoute: typeof AdminShardsLocationsRoute
  AdminShardsManageRoute: typeof AdminShardsManageRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminShardsLocationsRoute: AdminShardsLocationsRoute,
  AdminShardsManageRoute: AdminShardsManageRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/admin/shards/locations': typeof AdminShardsLocationsRoute
  '/admin/shards/manage': typeof AdminShardsManageRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/admin/shards/locations': typeof AdminShardsLocationsRoute
  '/admin/shards/manage': typeof AdminShardsManageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/admin/shards/locations': typeof AdminShardsLocationsRoute
  '/admin/shards/manage': typeof AdminShardsManageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/auth/login'
    | '/auth/register'
    | '/auth/verify-email'
    | '/admin/shards/locations'
    | '/admin/shards/manage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/auth/login'
    | '/auth/register'
    | '/auth/verify-email'
    | '/admin/shards/locations'
    | '/admin/shards/manage'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/auth/login'
    | '/auth/register'
    | '/auth/verify-email'
    | '/admin/shards/locations'
    | '/admin/shards/manage'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthVerifyEmailRoute: typeof AuthVerifyEmailRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthVerifyEmailRoute: AuthVerifyEmailRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/auth/login",
        "/auth/register",
        "/auth/verify-email"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/shards/locations",
        "/admin/shards/manage"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/auth/verify-email": {
      "filePath": "auth/verify-email.tsx"
    },
    "/admin/shards/locations": {
      "filePath": "admin/shards/locations.tsx",
      "parent": "/admin"
    },
    "/admin/shards/manage": {
      "filePath": "admin/shards/manage.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
